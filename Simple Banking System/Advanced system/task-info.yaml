type: edu
custom_name: stage4
files:
- name: src/banking/Main.java
  visible: true
  text: |-
    package banking;

    public class Main {
        public static void main(String[] args) {
            System.out.println("Hello, world!");
        }
    }
  learner_created: false
- name: test/SimpleBankSystemTest.java
  visible: false
  text: |
    import banking.Main;
    import org.hyperskill.hstest.dynamic.input.DynamicTestingMethod;
    import org.hyperskill.hstest.exception.outcomes.WrongAnswer;
    import org.hyperskill.hstest.stage.StageTest;
    import org.hyperskill.hstest.testcase.CheckResult;
    import org.hyperskill.hstest.testing.TestedProgram;
    import org.junit.AfterClass;
    import org.junit.BeforeClass;

    import java.io.File;
    import java.io.IOException;
    import java.nio.file.Files;
    import java.nio.file.Path;
    import java.nio.file.Paths;
    import java.sql.*;
    import java.util.HashMap;
    import java.util.Map;
    import java.util.Random;
    import java.util.regex.Matcher;
    import java.util.regex.Pattern;

    public class SimpleBankSystemTest extends StageTest<String> {

        private static final String databaseFileName = "card.s3db";
        private static final String tempDatabaseFileName = "tempDatabase.s3db";
        private static final String[] args = {"-fileName", databaseFileName};
        private static final Map<String, String> correctData = new HashMap<>();

        private static final Pattern cardNumberPattern = Pattern.compile("400000\\d{10}");
        private static final Pattern pinPattern = Pattern.compile("^\\d{4}$", Pattern.MULTILINE);

        private static Connection connection;


        @DynamicTestingMethod
        CheckResult test1_checkDatabaseFile() {

            TestedProgram program = new TestedProgram(Main.class);
            program.start(args);

            stopAndCheckIfUserProgramWasStopped(program);

            File file = new File(databaseFileName);

            if (!file.exists()) {
                return CheckResult.wrong("You should create a database file " +
                    "named " + databaseFileName + ". The file name should be taken from the command line arguments.\n" +
                    "The database file shouldn't be deleted after stopping the program!");
            }

            return CheckResult.correct();
        }

        @DynamicTestingMethod
        CheckResult test2_checkConnection() {

            TestedProgram program = new TestedProgram(Main.class);
            program.start(args);

            stopAndCheckIfUserProgramWasStopped(program);

            getConnection();
            closeConnection();

            return CheckResult.correct();
        }

        @DynamicTestingMethod
        CheckResult test3_checkIfTableExists() {

            TestedProgram program = new TestedProgram(Main.class);
            program.start(args);

            stopAndCheckIfUserProgramWasStopped(program);

            try {
                ResultSet resultSet = getConnection().createStatement().executeQuery(
                    "SELECT name FROM sqlite_master WHERE type ='table' AND name NOT LIKE 'sqlite_%';");
                while (resultSet.next()) {
                    if (resultSet.getString("name").equals("card")) {
                        return CheckResult.correct();
                    }
                }
            } catch (SQLException e) {
                return CheckResult.wrong("Can't execute a query in your database! Make sure that your database isn't broken!");
            }

            closeConnection();
            return CheckResult.wrong("Your database doesn't have a table named 'card'");
        }

        @DynamicTestingMethod
        CheckResult test4_checkColumns() {

            TestedProgram program = new TestedProgram(Main.class);
            program.start(args);

            stopAndCheckIfUserProgramWasStopped(program);

            try {

                ResultSet resultSet = getConnection().createStatement().executeQuery("PRAGMA table_info(card);");
                Map<String, String> columns = new HashMap<>();

                while (resultSet.next()) {
                    columns.put(resultSet.getString("name").toLowerCase(), resultSet.getString("type").toUpperCase());
                }

                String[][] correctColumns = {{"id", "INTEGER"}, {"number", "TEXT"}, {"pin", "TEXT"}, {"balance", "INTEGER"}};

                for (String[] correctColumn : correctColumns) {
                    String errorMessage = "Can't find '" + correctColumn[0] + "' column with '" + correctColumn[1] + "' type.\n" +
                        "Your table should have columns described in " +
                        "the stage instructions.";

                    if (!columns.containsKey(correctColumn[0])) {
                        return CheckResult.wrong(errorMessage);
                    } else if (!columns.get(correctColumn[0]).equals(correctColumn[1])) {
                        return CheckResult.wrong(errorMessage);
                    }
                }
            } catch (SQLException e) {
                return CheckResult.wrong("Can't connect to the database!");
            }

            closeConnection();
            return CheckResult.correct();
        }


        @DynamicTestingMethod
        CheckResult test5_checkAddingRowsToTheTable() {

            deleteAllRows();

            TestedProgram program = new TestedProgram(Main.class);
            program.start(args);

            String output = program.execute("1");

            if (!getData(output)) {
                return CheckResult.wrong("You should output card number and PIN like in example\n" +
                    "Or it doesn't pass the Luhn algorithm");
            }

            output = program.execute("1");

            if (!getData(output)) {
                return CheckResult.wrong("You should output card number and PIN like in example\n" +
                    "Or it doesn't pass the Luhn algorithm");
            }

            output = program.execute("1");

            if (!getData(output)) {
                return CheckResult.wrong("You should output card number and PIN like in example\n" +
                    "Or it doesn't pass the Luhn algorithm");
            }

            output = program.execute("1");

            if (!getData(output)) {
                return CheckResult.wrong("You should output card number and PIN like in example\n" +
                    "Or it doesn't pass the Luhn algorithm");
            }

            output = program.execute("1");

            if (!getData(output)) {
                return CheckResult.wrong("You should output card number and PIN like in example\n" +
                    "Or it doesn't pass the Luhn algorithm");
            }

            stopAndCheckIfUserProgramWasStopped(program);

            try {

                ResultSet resultSet = getConnection().createStatement().executeQuery("SELECT * FROM card");
                Map<String, String> userData = new HashMap<>();

                while (resultSet.next()) {
                    System.out.println(resultSet.getString("number"));
                    if (resultSet.getString("number") == null) {
                        return CheckResult.wrong("The card number shouldn't be null in the database!");
                    }
                    if (resultSet.getInt("balance") != 0) {
                        return CheckResult.wrong("Default balance value should be 0 in the database!");
                    }
                    if (resultSet.getString("pin") == null) {
                        return CheckResult.wrong("The PIN shouldn't be null in the database!");
                    }
                    userData.put(resultSet.getString("number"), resultSet.getString("pin"));
                }

                for (Map.Entry<String, String> entry : correctData.entrySet()) {
                    if (!userData.containsKey(entry.getKey())) {
                        return CheckResult.wrong("Your database doesn't save newly created cards.");
                    } else if (!userData.get(entry.getKey()).equals(entry.getValue())) {
                        return CheckResult.wrong("Correct PIN for card number " + entry.getKey() + " should " +
                            "be " + entry.getValue());
                    }
                }


            } catch (SQLException e) {
                return CheckResult.wrong("Can't connect the database!");
            }

            closeConnection();
            return CheckResult.correct();
        }

        @DynamicTestingMethod
        CheckResult test6_checkLogIn() {

            TestedProgram program = new TestedProgram(Main.class);
            program.start(args);

            String output = program.execute("1");

            Matcher cardNumberMatcher = cardNumberPattern.matcher(output);

            if (!cardNumberMatcher.find()) {
                return CheckResult.wrong("You are printing the card number " +
                    "incorrectly. The card number should look like in the example:" +
                    " 400000DDDDDDDDDD, where D is a digit.");
            }

            Matcher pinMatcher = pinPattern.matcher(output);

            if (!pinMatcher.find()) {
                return CheckResult.wrong("You are printing the card PIN " +
                    "incorrectly. The PIN should look like in the example: DDDD, where D is a digit.");
            }

            String correctPin = pinMatcher.group().trim();
            String correctCardNumber = cardNumberMatcher.group();

            program.execute("2");
            output = program.execute(correctCardNumber + "\n" + correctPin);

            if (!output.toLowerCase().contains("successfully")) {
                return CheckResult.wrong("The user should be signed in after" +
                    " entering the correct card information.");
            }

            stopAndCheckIfUserProgramWasStopped(program);

            return CheckResult.correct();
        }

        @DynamicTestingMethod
        CheckResult test7_checkLogInWithWrongPin() {

            TestedProgram program = new TestedProgram(Main.class);
            program.start(args);

            String output = program.execute("1");

            Matcher cardNumberMatcher = cardNumberPattern.matcher(output);
            Matcher pinMatcher = pinPattern.matcher(output);

            if (!cardNumberMatcher.find() || !pinMatcher.find()) {
                return CheckResult.wrong("You should output card number and PIN like in example");
            }

            String correctCardNumber = cardNumberMatcher.group();
            String correctPin = pinMatcher.group();

            Random random = new Random();

            String incorrectPin = correctPin;

            while (correctPin.equals(incorrectPin)) {
                incorrectPin = String.valueOf(1000 + random.nextInt(8999));
            }

            program.execute("2");
            output = program.execute(correctCardNumber + "\n" + incorrectPin);

            if (output.toLowerCase().contains("successfully")) {
                return CheckResult.wrong("The user should not be signed in" +
                    " after entering incorrect card information.");
            }

            stopAndCheckIfUserProgramWasStopped(program);
            return CheckResult.correct();
        }

        @DynamicTestingMethod
        CheckResult test8_checkLogInToNotExistingAccount() {

            TestedProgram program = new TestedProgram(Main.class);
            program.start(args);

            String output = program.execute("1");

            Matcher cardNumberMatcher = cardNumberPattern.matcher(output);
            Matcher pinMatcher = pinPattern.matcher(output);

            if (!cardNumberMatcher.find() || !pinMatcher.find()) {
                return CheckResult.wrong("You should output card number and PIN like in example");
            }

            String correctCardNumber = cardNumberMatcher.group();
            String correctPin = pinMatcher.group();

            Random random = new Random();

            String incorrectCardNumber = correctCardNumber;

            while (correctCardNumber.equals(incorrectCardNumber)) {
                incorrectCardNumber = "400000" + (1_000_000_00 + random.nextInt(8_000_000_00));
            }

            program.execute("2");
            output = program.execute(incorrectCardNumber + "\n" + correctPin);

            if (output.toLowerCase().contains("successfully")) {
                return CheckResult.wrong("The user should not be signed in" +
                    " after entering incorrect card information.");
            }

            stopAndCheckIfUserProgramWasStopped(program);
            return CheckResult.correct();
        }

        @DynamicTestingMethod
        CheckResult test9_checkBalance() {

            TestedProgram program = new TestedProgram(Main.class);
            program.start(args);

            String output = program.execute("1");

            Matcher cardNumberMatcher = cardNumberPattern.matcher(output);
            Matcher pinMatcher = pinPattern.matcher(output);

            if (!cardNumberMatcher.find() || !pinMatcher.find()) {
                return CheckResult.wrong("You should output card number and PIN like in example");
            }

            String correctPin = pinMatcher.group().trim();
            String correctCardNumber = cardNumberMatcher.group();

            program.execute("2");
            program.execute(correctCardNumber + "\n" + correctPin);

            output = program.execute("1");

            if (!output.contains("0")) {
                return CheckResult.wrong("Expected balance: 0");
            }

            stopAndCheckIfUserProgramWasStopped(program);
            return CheckResult.correct();
        }

        // ttest is not a typo!
        @DynamicTestingMethod
        CheckResult ttest10_checkAddIncome() {

            deleteAllRows();

            TestedProgram program = new TestedProgram(Main.class);
            program.start(args);

            String output = program.execute("1");

            Matcher cardNumberMatcher = cardNumberPattern.matcher(output);
            Matcher pinMatcher = pinPattern.matcher(output);

            if (!cardNumberMatcher.find() || !pinMatcher.find()) {
                return new CheckResult(false, "You should output card number and PIN like in example");
            }

            String correctPin = pinMatcher.group().trim();
            String correctCardNumber = cardNumberMatcher.group();

            program.execute("2");
            program.execute(correctCardNumber + "\n" + correctPin);
            program.execute("2\n10000");
            stopAndCheckIfUserProgramWasStopped(program);

            int userBalance = getBalance(correctCardNumber);
            if (userBalance != 10000) {
                return CheckResult.wrong("Account balance int the database is wrong after adding income.\nExpected 10000");
            }

            program = new TestedProgram(Main.class);
            program.start(args);

            program.execute("2");
            program.execute(correctCardNumber + "\n" + correctPin);
            program.execute("2\n15000");
            stopAndCheckIfUserProgramWasStopped(program);

            userBalance = getBalance(correctCardNumber);
            if (userBalance != 25000) {
                return CheckResult.wrong("Account balance is wrong after adding income.\nExpected 25000");
            }

            return CheckResult.correct();
        }

        // ttest is not a typo!
        @DynamicTestingMethod
        CheckResult ttest11_checkTransfer() {

            String incorrectCardNumber = "2000007269641764"; //Doesn't pass Luhn algorithm
            String notExistingCardNumber = "2000007269641768";

            deleteAllRows();

            TestedProgram program = new TestedProgram(Main.class);
            program.start(args);

            String output = program.execute("1");

            Matcher cardNumberMatcher = cardNumberPattern.matcher(output);

            if (!cardNumberMatcher.find()) {
                return new CheckResult(false, "Your program outputs card number " +
                    "wrong.\nCard number should look like 400000DDDDDDDDDD. Where D is some digit");
            }

            String toTransferCardNumber = cardNumberMatcher.group();

            output = program.execute("1");

            cardNumberMatcher = cardNumberPattern.matcher(output);
            Matcher pinMatcher = pinPattern.matcher(output);

            if (!cardNumberMatcher.find() || !pinMatcher.find()) {
                return new CheckResult(false, "You should output card number and PIN like in example");
            }

            String correctPin = pinMatcher.group().trim();
            String correctCardNumber = cardNumberMatcher.group();

            program.execute("2");
            program.execute(correctCardNumber + "\n" + correctPin);
            output = program.execute("3\n" + incorrectCardNumber);

            if (!output.contains("mistake")) {
                return new CheckResult(false, "You should not allow to transfer " +
                    "to a card number that doesn't pass the Luhn algorithm.\n You should print " +
                    "'Probably you made mistake in the card number. Please try again!'");
            }

            output = program.execute("3\n" + notExistingCardNumber);

            if (!output.contains("exist")) {
                return new CheckResult(false, "You should not allow to transfer " +
                    "to a card number that does not exist.\nYou should print " +
                    "'Such a card does not exist.'");
            }

            output = program.execute("3\n" + toTransferCardNumber + "\n100000");
            if (!output.toLowerCase().contains("not enough money")) {
                return new CheckResult(false, "You should not allow a transfer if " +
                    "there is not enough money in the account to complete it. You should print " +
                    "'Not enough money!'");
            }

            program.execute("2\n20000\n3\n" + toTransferCardNumber + "\n10000");

            stopAndCheckIfUserProgramWasStopped(program);

            int correctBalanceForBothAccounts = 10000;
            int toTransferCardBalance = getBalance(toTransferCardNumber);
            int correctCardNumberBalance = getBalance(correctCardNumber);

            if (toTransferCardBalance != correctBalanceForBothAccounts) {
                return new CheckResult(false, "Incorrect account balance of the card to which the transfer was made.");
            }

            if (correctCardNumberBalance != correctBalanceForBothAccounts) {
                return new CheckResult(false, "Incorrect account balance of the card used to make the transfer.");
            }

            return CheckResult.correct();
        }

        // ttest is not a typo!
        @DynamicTestingMethod
        CheckResult ttest12_checkTransfer() {

            deleteAllRows();

            TestedProgram program = new TestedProgram(Main.class);
            program.start(args);

            String output = program.execute("1");

            Matcher cardNumberMatcher = cardNumberPattern.matcher(output);
            Matcher pinMatcher = pinPattern.matcher(output);

            if (!cardNumberMatcher.find() || !pinMatcher.find()) {
                return new CheckResult(false, "You should output card number and PIN like in example");
            }

            String correctPin = pinMatcher.group().trim();
            String correctCardNumber = cardNumberMatcher.group();

            program.execute("2\n" + correctCardNumber + "\n" + correctPin + "\n4");

            stopAndCheckIfUserProgramWasStopped(program);

            try {
                PreparedStatement statement = getConnection().prepareStatement("SELECT * FROM card where number = ?");
                statement.setString(1, correctCardNumber);
                ResultSet resultSet = statement.executeQuery();
                if (resultSet.next()) {
                    return new CheckResult(false, "After closing the account, the card should be deleted " +
                        "from the database.");
                }
            } catch (SQLException e) {
                throw new WrongAnswer("Can't execute a query in your database! Make sure that your database isn't broken!");
            }

            closeConnection();
            return CheckResult.correct();
        }

        private static Connection getConnection() {
            if (connection == null) {
                try {
                    connection = DriverManager.getConnection("jdbc:sqlite:" + databaseFileName);
                } catch (SQLException exception) {
                    throw new WrongAnswer("Can't connect to the database! Make sure you close your database" +
                        " connection at the end of the program!");
                }
            }
            return connection;
        }

        private static void closeConnection() {
            if (connection == null)
                return;
            try {
                connection.close();
            } catch (SQLException ignored) {
            }
            connection = null;
        }

        @BeforeClass
        public static void createTempDatabase() throws IOException {

            closeConnection();

            Path userDbFile = Paths.get(databaseFileName);
            Path tempDbFile = Paths.get(tempDatabaseFileName);

            if (!userDbFile.toFile().exists())
                return;

            try {
                Files.deleteIfExists(tempDbFile);
                Files.copy(userDbFile, tempDbFile);
            } catch (Exception ignored) {
            }
        }

        @AfterClass
        public static void deleteTempDatabase() throws IOException {

            closeConnection();

            Path userDbFile = Paths.get(databaseFileName);
            Path tempDbFile = Paths.get(tempDatabaseFileName);

            if (!tempDbFile.toFile().exists())
                return;

            try {
                Files.deleteIfExists(userDbFile);
                Files.move(tempDbFile, userDbFile);
            } catch (Exception ignored) {
            }
        }

        private boolean getData(String out) {

            Pattern cardNumberPattern = Pattern.compile("400000\\d{10}");
            Matcher cardNumberMatcher = cardNumberPattern.matcher(out);

            Pattern pinPattern = Pattern.compile("^\\d{4}$", Pattern.MULTILINE);
            Matcher pinMatcher = pinPattern.matcher(out);

            if (!cardNumberMatcher.find() || !pinMatcher.find()) {
                return false;
            }

            String number = cardNumberMatcher.group();
            String PIN = pinMatcher.group();

            if (!checkLuhnAlgorithm(number)) {
                return false;
            }

            correctData.put(number, PIN);

            return true;
        }

        private boolean checkLuhnAlgorithm(String cardNumber) {
            int result = 0;
            for (int i = 0; i < cardNumber.length(); i++) {
                int digit = Character.getNumericValue(cardNumber.charAt(i));
                if (i % 2 == 0) {
                    int doubleDigit = digit * 2 > 9 ? digit * 2 - 9 : digit * 2;
                    result += doubleDigit;
                    continue;
                }
                result += digit;
            }
            return result % 10 == 0;
        }

        private void deleteAllRows() {
            try {
                getConnection().createStatement().execute("DELETE FROM card");
                closeConnection();
            } catch (SQLException exception) {
                throw new WrongAnswer("Can't execute a query in your database! Make sure that your database isn't broken!");
            }
        }

        private void stopAndCheckIfUserProgramWasStopped(TestedProgram program) {
            program.execute("0");
            if (!program.isFinished()) {
                throw new WrongAnswer("After choosing 'Exit' item you should stop your program" +
                    " and close database connection!");
            }
        }

        private static int getBalance(String cardNumber) {
            try {
                PreparedStatement preparedStatement = getConnection().prepareStatement("SELECT * FROM card WHERE number = ?");
                preparedStatement.setString(1, cardNumber);
                ResultSet resultSet = preparedStatement.executeQuery();
                resultSet.next();
                int result = resultSet.getInt("balance");
                closeConnection();
                return result;
            } catch (SQLException e) {
                throw new WrongAnswer("Can't execute a query in your database! Make sure that your database isn't broken!");
            }
        }
    }
  learner_created: false
- name: src/banking/bank/account/Account.java
  visible: true
  text: |
    package banking.bank.account;


    public class Account {

        private final String CARD_NUMBER;
        private final String CARD_PIN;
        private int balance;
        private final int id;
        private static int maxId = 0;

        public Account(String cardNumber, String cardPin, int id) {
            this.CARD_NUMBER = cardNumber;
            this.CARD_PIN = cardPin;
            this.id = id;
            this.balance = 0;
        }

        public Account(String CARD_NUMBER, String CARD_PIN, int id, int balance) {
            this.CARD_NUMBER = CARD_NUMBER;
            this.CARD_PIN = CARD_PIN;
            this.id = id;
            this.balance = balance;
        }

        public String getCARD_NUMBER() {
            return CARD_NUMBER;
        }

        public String getCARD_PIN() {
            return CARD_PIN;
        }

        public int getBalance() {
            return balance;
        }

        public int getId() {
            return id;
        }
    }
  learner_created: true
- name: src/banking/bank/Bank.java
  visible: true
  text: |
    package banking.bank;

    import banking.bank.account.Account;
    import banking.bank.account.AccountFactory;
    import banking.bank.data_base.AccountDAO;


    import java.util.Scanner;

    public class Bank {

        private final Scanner scanner;
        private Account currentAccount;
        private final AccountDAO dataBase;
        private final AccountFactory factory;

        public Bank(String dataBaseName) {
            this.currentAccount = null;
            this.dataBase = new AccountDAO(dataBaseName);
            this.scanner = new Scanner(System.in);
            this.factory = new AccountFactory(dataBase);
            dataBase.createTable();
        }

        Account createAccount() {
            Account account = factory.createAccount();
            dataBase.save(account);
            return account;
        }

        boolean logIn() {

            System.out.println("Enter your card number:");
            String cardNumber = scanner.nextLine();

            System.out.println("Enter your PIN:");
            String cardPIN = scanner.nextLine();

            currentAccount = dataBase.findAccount(cardNumber, cardPIN);

            return currentAccount != null;
        }

        void logOut() {
            currentAccount = null;
        }

        public Account getCurrentAccount() {
            return currentAccount;
        }

    }
  learner_created: true
- name: src/banking/bank/view/UserView.java
  visible: true
  text: |
    package banking.bank.view;

    import banking.bank.account.Account;

    public class UserView {

        private Menu menu = Menu.MAIN_MENU;

        public void showMenu() {
            switch (menu) {
                case MAIN_MENU:
                    showMainMenu();
                    break;
                case ACCOUNT_MENU:
                    showAccountMenu();
                    break;
            }
        }

        private void showAccountMenu() {
            System.out.println("1. Balance\n" +
                    "2. Log out\n" +
                    "0. Exit");
        }

        private void showMainMenu() {
            System.out.println("1. Create an account\n" +
                    "2. Log into account\n" +
                    "0. Exit");
        }

        public void changeMenu() {
            if (menu == Menu.MAIN_MENU) {
                menu = Menu.ACCOUNT_MENU;
            } else {
                menu = Menu.MAIN_MENU;
            }
        }

        public void showAccountInfo(Account account) {
            System.out.printf("\nYour card have been created\n" +
                    "Your card number:\n" +
                    "%s\n" +
                    "Your card PIN:\n" +
                    "%s\n\n", account.getCARD_NUMBER(), account.getCARD_PIN());
            System.out.println(account.getCARD_NUMBER().length());
        }

        public void showResultOfLogIn(boolean isSuccess) {
            if (isSuccess) {
                System.out.println("\nYou have successfully logged in!\n");
            } else {
                System.out.println("\nWrong card number or PIN!\n");
            }
        }

        public void showBalance(int balance) {
            System.out.println("\nBalance: " + balance + "\n");
        }
    }
  learner_created: true
- name: src/banking/bank/view/Menu.java
  visible: true
  text: |
    package banking.bank.view;

    public enum Menu {

        MAIN_MENU,
        ACCOUNT_MENU

    }
  learner_created: true
- name: src/banking/bank/account/AccountFactory.java
  visible: true
  text: |
    package banking.bank.account;

    import banking.bank.data_base.AccountDAO;

    import java.util.Random;

    public class AccountFactory {

        private final Random random = new Random();
        private final AccountDAO data;

        public AccountFactory(AccountDAO data) {
            this.data = data;
        }

        public Account createAccount() {

            String cardNumber = generateCardNumber();
            String cardPIN = generateCardPIN();

            return new Account(cardNumber, cardPIN, data.findMaxId());
        }

        private String generateCardPIN() {

            int cardPIN = random.nextInt(10000);
            return String.format("%04d", cardPIN);
        }

        private String generateCardNumber() {
            StringBuilder cardNumber;
            do {
                cardNumber = new StringBuilder("400000");
                cardNumber.append(String.format("%09d", random.nextInt(1000000000)));
                cardNumber.append(generateLastDigit(cardNumber.toString()));

            } while (data.checkAccountInDataBase(cardNumber.toString()));
            return cardNumber.toString();
        }

        private char generateLastDigit(String cardNumber) {

            int result = 0;

            for (int i = 0; i < cardNumber.length(); i++) {
                int digit = Character.getNumericValue(cardNumber.charAt(i));
                if (i % 2 == 0) {
                    digit *= 2;
                }
                if (digit > 9) {
                    digit -= 9;
                }
                result += digit;
            }

            int checksum = 0;
            while ((result + checksum) % 10 != 0) {
                checksum++;
            }
            return Character.forDigit(checksum, 10);
        }

    }
  learner_created: true
- name: src/banking/bank/data_base/AccountDAO.java
  visible: true
  text: |
    package banking.bank.data_base;

    import banking.bank.account.Account;

    import java.sql.*;

    public class AccountDAO {

        private final String url;

        public AccountDAO(String dataBaseName) {
            this.url = "jdbc:sqlite:" + dataBaseName;
        }

        public void save(Account account) {
            try (Connection conn = DriverManager.getConnection(url)) {

                try (Statement st = conn.createStatement()) {
                    st.executeUpdate(String.format("INSERT INTO card VALUES (%d, '%s', '%s', %d)",
                            account.getId(), account.getCARD_NUMBER(), account.getCARD_PIN(), account.getBalance()));
                }

            } catch (SQLException e) {
                System.out.println(e.getMessage());
            }
        }

        public void createTable() {

            try (Connection conn = DriverManager.getConnection(url)) {

                try (Statement st = conn.createStatement()) {

                    st.executeUpdate("CREATE TABLE IF NOT EXISTS card (" +
                            "id INTEGER PRIMARY KEY," +
                            "number TEXT NOT NULL," +
                            "pin TEXT NOT NULL," +
                            "balance INTEGER DEFAULT 0 NOT NULL)");
                }

            } catch (SQLException e) {
                System.out.println(e.getMessage());
            }
        }

        public Account findAccount(String cardNumber, String cardPIN) {

            try (Connection conn = DriverManager.getConnection(url)) {

                Statement st = conn.createStatement();
                try (ResultSet set = st.executeQuery("SELECT * FROM card WHERE number = " + cardNumber)) {

                    if (set.next()) {
                        if (cardPIN.equals(set.getString("pin"))) {
                            return new Account(set.getString("number"), set.getString("pin"),
                                    set.getInt("id"), set.getInt("balance"));
                        }
                    }
                }
                st.close();

            } catch (SQLException e) {
                System.out.println(e.getMessage());
            }

            return null;
        }

        public boolean checkAccountInDataBase(String cardNumber) {
            try (Connection conn = DriverManager.getConnection(url)) {

                Statement st = conn.createStatement();
                try (ResultSet set = st.executeQuery("SELECT * FROM card WHERE number = " + cardNumber)) {

                    if (set.next()) {
                        return true;
                    }
                }
                st.close();

            } catch (SQLException e) {
                System.out.println(e.getMessage());
            }

            return false;
        }

        public int findMaxId() {
            try (Connection conn = DriverManager.getConnection(url)) {

                Statement st = conn.createStatement();
                try (ResultSet set = st.executeQuery("SELECT MAX(id) FROM card")) {

                    if (set.next()) {
                        return set.getInt(1) + 1;
                    }
                }
                st.close();

            } catch (SQLException e) {
                System.out.println(e.getMessage());
            }
            return 1;
        }
    }
  learner_created: true
- name: src/banking/bank/Controller.java
  visible: true
  text: |
    package banking.bank;

    import banking.bank.view.Menu;
    import banking.bank.view.UserView;

    import java.util.Scanner;

    public class Controller {

        private final UserView userView;
        private final Bank bank;
        private final Scanner scanner = new Scanner(System.in);
        private Menu menu = Menu.MAIN_MENU;

        public Controller(String dataBaseName) {
            this.userView = new UserView();
            this.bank = new Bank(dataBaseName);
        }

        public void run() throws Exception {

            userView.showMenu();

            while (true) {
                switch (scanner.next()) {
                    case "1":
                        onEnterOne();
                        break;
                    case "2":
                        onEnterTwo();
                        break;
                    case "0":
                        throw new Exception("\nBye!");
                    default:
                        System.out.println("\nUnsupported operation\n");
                }
                userView.showMenu();
            }
        }

        private void onEnterTwo() {
            switch (menu) {
                case MAIN_MENU:
                    logIn();
                    break;
                case ACCOUNT_MENU:
                    bank.logOut();
                    changeMenu();
            }
        }

        private void onEnterOne() {
            switch (menu) {
                case MAIN_MENU:
                    userView.showAccountInfo(bank.createAccount());
                    break;
                case ACCOUNT_MENU:
                    userView.showBalance(bank.getCurrentAccount().getBalance());
            }
        }

        private void logIn() {

            boolean isSuccess = bank.logIn();
            userView.showResultOfLogIn(isSuccess);

            if (isSuccess) {
                changeMenu();
            }
        }

        private void changeMenu() {
            userView.changeMenu();
            if (menu == Menu.MAIN_MENU) {
                menu = Menu.ACCOUNT_MENU;
            } else {
                menu = Menu.MAIN_MENU;
            }
        }
    }
  learner_created: true
feedback_link: https://hyperskill.org/projects/93/stages/518/implement#comment
status: Solved
feedback:
  message: Congratulations! Continue on <a href="https://hyperskill.org/projects/93/stages/518/implement">JetBrains
    Academy</a>
  time: Fri, 13 Nov 2020 12:45:18 UTC
record: -1
