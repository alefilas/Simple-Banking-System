type: edu
custom_name: stage2
files:
- name: src/banking/Main.java
  visible: true
  text: |-
    package banking;

    public class Main {
        public static void main(String[] args) {
            System.out.println("Hello, world!");
        }
    }
  learner_created: false
- name: test/SimpleBankSystemTest.java
  visible: false
  text: |-
    import banking.Main;
    import org.hyperskill.hstest.dynamic.input.DynamicTestingMethod;
    import org.hyperskill.hstest.stage.StageTest;
    import org.hyperskill.hstest.testcase.CheckResult;
    import org.hyperskill.hstest.testing.TestedProgram;

    import java.util.Random;
    import java.util.regex.Matcher;
    import java.util.regex.Pattern;

    public class SimpleBankSystemTest extends StageTest<String> {

        private static final Pattern cardNumberPattern = Pattern.compile("400000\\d{10}");
        private static final Pattern pinPattern = Pattern.compile("^\\d{4}$", Pattern.MULTILINE);

        @DynamicTestingMethod
        CheckResult test1_checkCardCredentials() {

            TestedProgram program = new TestedProgram(Main.class);
            program.start();

            String output = program.execute("1");

            Matcher cardNumberMatcher = cardNumberPattern.matcher(output);

            if (!cardNumberMatcher.find()) {
                return CheckResult.wrong("You are printing the card number " +
                    "incorrectly. The card number should look like in the example: " +
                    "400000DDDDDDDDDD, where D is a digit.");
            }

            Matcher pinMatcher = pinPattern.matcher(output);

            if (!pinMatcher.find()) {
                return CheckResult.wrong("You are printing the card PIN " +
                    "incorrectly. The PIN should look like in the example: DDDD, where D is " +
                    "a digit.");
            }

            String correctCardNumber = cardNumberMatcher.group();

            output = program.execute("1");
            cardNumberMatcher = cardNumberPattern.matcher(output);

            if (!cardNumberMatcher.find()) {
                return CheckResult.wrong("You are printing the card number " +
                    "incorrectly. The card number should look like in the example: " +
                    "400000DDDDDDDDDD, where D is a digit.");
            }

            pinMatcher = pinPattern.matcher(output);

            if (!pinMatcher.find()) {
                return CheckResult.wrong("You are printing the card PIN " +
                    "incorrectly. The PIN should look like in the example: DDDD, where D is " +
                    "a digit.");
            }

            String anotherCardNumber = cardNumberMatcher.group();

            if (anotherCardNumber.equals(correctCardNumber)) {
                return CheckResult.wrong("Your program generates two identical card numbers!");
            }

            program.execute("0");

            return CheckResult.correct();
        }

        @DynamicTestingMethod
        CheckResult test2_checkLogInAndLogOut() {

            TestedProgram program = new TestedProgram(Main.class);
            program.start();

            String output = program.execute("1");

            Matcher cardNumberMatcher = cardNumberPattern.matcher(output);

            if (!cardNumberMatcher.find()) {
                return new CheckResult(false, "You are printing the card number " +
                    "incorrectly. The card number should look like in the example: " +
                    "400000DDDDDDDDDD, where D is a digit.");
            }

            Matcher pinMatcher = pinPattern.matcher(output);

            if (!pinMatcher.find()) {
                return new CheckResult(false, "You are printing the card PIN " +
                    "incorrectly. The PIN should look like in the example: DDDD, where D is " +
                    "a digit.");
            }
            String correctPin = pinMatcher.group().trim();
            String correctCardNumber = cardNumberMatcher.group();

            program.execute("2");
            output = program.execute(correctCardNumber + "\n" + correctPin);

            if (!output.toLowerCase().contains("successfully")) {
                return new CheckResult(false, "The user should be signed in after " +
                    "entering the correct card information.");
            }

            output = program.execute("2");

            if (!output.toLowerCase().contains("create")) {
                return new CheckResult(false, "The user should be logged out after choosing 'Log out' option.\n" +
                    "And you should print the menu with 'Create an account' option.");
            }

            program.execute("0");

            return CheckResult.correct();
        }

        @DynamicTestingMethod
        CheckResult test3_checkLogInWithWrongPin() {

            TestedProgram program = new TestedProgram(Main.class);
            program.start();

            String output = program.execute("1");

            Matcher cardNumberMatcher = cardNumberPattern.matcher(output);
            Matcher pinMatcher = pinPattern.matcher(output);

            if (!cardNumberMatcher.find() || !pinMatcher.find()) {
                return new CheckResult(false, "You should output card number and PIN like in example!");
            }

            String correctCardNumber = cardNumberMatcher.group();
            String correctPin = pinMatcher.group();

            Random random = new Random();

            String incorrectPin = correctPin;

            while (correctPin.equals(incorrectPin)) {
                incorrectPin = String.valueOf(1000 + random.nextInt(8999));
            }

            program.execute("2");
            output = program.execute(correctCardNumber + "\n" + incorrectPin);

            if (output.toLowerCase().contains("successfully")) {
                return new CheckResult(false, "The user should not be signed in after" +
                    " entering incorrect card information.");
            }

            program.execute("0");

            return CheckResult.correct();
        }

        @DynamicTestingMethod
        CheckResult test4_checkLogInToNotExistingAccount() {

            TestedProgram program = new TestedProgram(Main.class);
            program.start();

            String output = program.execute("1");

            Matcher cardNumberMatcher = cardNumberPattern.matcher(output);
            Matcher pinMatcher = pinPattern.matcher(output);

            if (!cardNumberMatcher.find() || !pinMatcher.find()) {
                return new CheckResult(false, "You should output card number " +
                    "and PIN like in example");
            }

            String correctCardNumber = cardNumberMatcher.group();

            Random random = new Random();

            String correctPin = pinMatcher.group().trim();
            String incorrectCardNumber = correctCardNumber;

            while (correctCardNumber.equals(incorrectCardNumber)) {
                incorrectCardNumber = "400000" + (1_000_000_00 + random.nextInt(8_000_000_00));
            }

            program.execute("2");
            output = program.execute(incorrectCardNumber + "\n" + correctPin);

            if (output.toLowerCase().contains("successfully")) {
                return new CheckResult(false, "The user should not be signed" +
                    " in after entering the information of a non-existing card.");
            }

            return CheckResult.correct();
        }

        @DynamicTestingMethod
        CheckResult test5_checkBalance() {

            TestedProgram program = new TestedProgram(Main.class);
            program.start();

            String output = program.execute("1");

            Matcher cardNumberMatcher = cardNumberPattern.matcher(output);
            Matcher pinMatcher = pinPattern.matcher(output);

            if (!cardNumberMatcher.find() || !pinMatcher.find()) {
                return new CheckResult(false, "You should output card number and PIN like in example");
            }

            String correctPin = pinMatcher.group().trim();
            String correctCardNumber = cardNumberMatcher.group();

            program.execute("2");
            program.execute(correctCardNumber + "\n" + correctPin);
            output = program.execute("1");

            if (!output.contains("0")) {
                return new CheckResult(false, "Expected balance: 0");
            }

            program.execute("0");

            return CheckResult.correct();
        }

        @DynamicTestingMethod
        CheckResult test6_checkLuhnAlgorithm() {

            TestedProgram program = new TestedProgram(Main.class);
            program.start();

            String output = program.execute("1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1");

            Matcher cardNumberMatcher = cardNumberPattern.matcher(output);

            boolean isSomeCardFound = false;
            int foundCards = 0;

            while (cardNumberMatcher.find()) {

                foundCards++;

                if (!isSomeCardFound) {
                    isSomeCardFound = true;
                }

                String cardNumber = cardNumberMatcher.group();

                if (!checkLuhnAlgorithm(cardNumber)) {
                    return new CheckResult(false, String.format("The card number %s doesnâ€™t pass the Luhn algorithm.", cardNumber));
                }
            }

            if (!isSomeCardFound) {
                return new CheckResult(false, "You should output card number and PIN like in example");
            }

            if (foundCards != 20) {
                return new CheckResult(false, "Tried to generate 20 cards, but found " + foundCards);
            }

            return CheckResult.correct();
        }

        private boolean checkLuhnAlgorithm(String cardNumber) {
            int result = 0;
            for (int i = 0; i < cardNumber.length(); i++) {
                int digit = Character.getNumericValue(cardNumber.charAt(i));
                if (i % 2 == 0) {
                    int doubleDigit = digit * 2 > 9 ? digit * 2 - 9 : digit * 2;
                    result += doubleDigit;
                    continue;
                }
                result += digit;
            }
            return result % 10 == 0;
        }
    }
  learner_created: false
- name: src/banking/bank/account/Account.java
  visible: true
  text: |
    package banking.bank.account;


    public class Account {

        private final String cardNumber;
        private final String cardPin;
        private int balance;

        public Account(String cardNumber, String cardPin) {
            this.cardNumber = cardNumber;
            this.cardPin = cardPin;
        }


        public String getCardNumber() {
            return cardNumber;
        }

        public String getCardPin() {
            return cardPin;
        }

        public int getBalance() {
            return balance;
        }
    }
  learner_created: true
- name: src/banking/bank/Bank.java
  visible: true
  text: |
    package banking.bank;

    import banking.bank.account.Account;
    import banking.bank.account.AccountFactory;

    import java.util.ArrayList;
    import java.util.Scanner;

    public class Bank {

        Scanner scanner = new Scanner(System.in);
        private final ArrayList<Account> accounts = new ArrayList<>();

        public void createAccount() {
            accounts.add(AccountFactory.createAccount(accounts));
            System.out.println();
        }

        public void start() {
            while (true) {
                System.out.println("1. Create an account\n" +
                        "2. Log into account\n" +
                        "0. Exit");
                switch (scanner.nextLine()) {
                    case "1":
                        createAccount();
                        break;
                    case "2":
                        logIn();
                        break;
                    case "0":
                        return;
                }
            }
        }

        private void account(Account account) {
            Scanner scanner = new Scanner(System.in);
            while (true) {
                System.out.println("1. Balance\n" +
                        "2. Log out\n" +
                        "0. Exit");
                switch (scanner.nextLine()) {
                    case "1":
                        System.out.println("Balance: " + account.getBalance());
                        break;
                    case "2":
                        return;
                    case "0":
                        System.exit(0);
                }
            }
        }

        private void logIn() {
            Scanner scanner = new Scanner(System.in);

            System.out.println("Enter your card number:");
            String cardNumber = scanner.nextLine();

            System.out.println("Enter your PIN:");
            String cardPIN = scanner.nextLine();

            Account account = findAccount(cardNumber, cardPIN);

            if (account != null) {
                System.out.println("\nYou have successfully logged in!\n");
                account(account);
            } else {
                System.out.println("\nWrong card number or PIN!\n");
            }
        }

        private Account findAccount(String cardNumber, String cardPIN) {

            for (Account ac : accounts) {
                if (ac.getCardNumber().equals(cardNumber) &&
                        ac.getCardPin().equals(cardPIN)) {
                    return ac;
                }
            }
            return null;
        }



    }
  learner_created: true
- name: src/banking/bank/account/AccountFactory.java
  visible: true
  text: |
    package banking.bank.account;

    import java.util.ArrayList;
    import java.util.Random;

    public class AccountFactory {

        private static final Random random = new Random();

        public static Account createAccount(ArrayList<Account> accounts) {

            String cardNumber = generateCardNumber(accounts);
            String cardPIN = generateCardPIN();

            System.out.printf("Your card has been created\n" +
                    "Your card number:\n" +
                    "%s\n" +
                    "Your card PIN:\n" +
                    "%s%n", cardNumber, cardPIN);

            return new Account(cardNumber, cardPIN);
        }

        private static String generateCardPIN() {

            StringBuilder cardPIN = new StringBuilder();
            for (int i = 0; i < 4; i++) {
                cardPIN.append(random.nextInt(10));
            }
            return cardPIN.toString();
        }

        private static String generateCardNumber(ArrayList<Account> accounts) {
            StringBuilder cardNumber;
            do {
                cardNumber = new StringBuilder("400000");
                for (int i = 0; i < 10; i++) {
                    cardNumber.append(random.nextInt(10));
                }
            } while (checkAccount(accounts, cardNumber.toString()));
            return cardNumber.toString();
        }

        private static boolean checkAccount(ArrayList<Account> accounts, String cardNumber) {
            for (Account ac: accounts){
                if (ac.getCardNumber().equals(cardNumber)) {
                    return true;
                }
            }
            return false;
        }

    }
  learner_created: true
feedback_link: https://hyperskill.org/projects/93/stages/516/implement#comment
status: Solved
feedback:
  message: Congratulations! Continue on <a href="https://hyperskill.org/projects/93/stages/516/implement">JetBrains
    Academy</a>
  time: Tue, 10 Nov 2020 11:49:37 UTC
record: 2
